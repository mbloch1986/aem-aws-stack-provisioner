#!/usr/bin/env bash
set -o nounset
set -o errexit

if (( $(ps -ef | grep -v grep | grep python | grep snapshot_backup | wc -l) > 0 )); then

  echo “snapshot_backup is running!!! Snapshots can hang when snapshoting the volume at the same time. Exiting”
  exit 1

else

  # Take a snapshot backup of an offline (stopped) AEM instance's repository.
  # The purpose of this backup is to eliminate/reduce the probability of
  # getting a corrupted repository.

  PATH=/opt/puppetlabs/bin:/opt/puppetlabs/puppet/bin:$PATH
  instance_id=$(facter ec2_metadata.instance-id)
  component=$(/opt/puppetlabs/bin/facter component)
  stack_prefix=$(/opt/puppetlabs/bin/facter stack_prefix)
  instance_id=$(facter ec2_metadata.instance-id)

  <% $aem_repo_devices.each | Integer $index, Hash $aem_repo_device | { -%>

    echo "<%= $aem_repo_device['device_name'] %> Snapshot Started: $(date)"

    snap_id=$(<%= $base_dir %>/aws-tools/snapshot_backup.py \
                --snapshot-description "Offline AEM snapshot of <%= $component %> instance ${instance_id}" \
                --tag "Name=AEM <%= $component %> Snapshot ${instance_id}" \
                --tag "Component=<%= $component %>" \
                --tag "StackPrefix=<%= $stack_prefix %>" \
                --tag "SnapshotType=offline" \
                --tag "AemId=<%= $aem_repo_device['aem_id'] %>" \
                <%= $aem_repo_device['device_name'] %>)

    echo "<%= $aem_repo_device['device_name'] %> Snapshot Ended: $(date)"

    echo "Testing if taken livesnapshot exists using InSpec..."
    cd "<%= $base_dir %>/aem-aws-stack-provisioner/modules/aem_curator/inspec/profiles/inspec-aem-aws"
    HOME=/root \
      aem_component="${component}" \
      aem_stack_prefix="${stack_prefix}" \
      snapshot_id="${snap_id}" \
      inspec exec . --controls aws-snapshot-exists

  <% } -%>
fi
