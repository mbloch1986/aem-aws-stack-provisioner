#!/usr/bin/env bash
set -o nounset
set -o errexit

if [ "$#" -ne 2 ]; then
  echo 'Usage: ./schedule-offline-snapshots.sh <all | offline_snapshot | offline_compaction_snapshot> <enable | disable>'
  exit 1
fi

# translate exit code to follow convention
translate_exit_code() {

  exit_code="$1"
  if [ "$exit_code" -eq 0 ]; then
    exit_code=0
  else
    rm -rf "${tmp_dir:?}/*"
    exit "$exit_code"
  fi

  return "$exit_code"
}

# translate puppet exit code to follow convention
translate_puppet_exit_code() {

  exit_code="$1"
  if [ "$exit_code" -eq 0 ] || [ "$exit_code" -eq 2 ]; then
    exit_code=0
  else
    rm -rf "${tmp_dir:?}/*"
    exit "$exit_code"
  fi

  return "$exit_code"
}

PATH=<%= $aem_tools_env_path %>

scheduled_job_name=$1
state=$2

tmp_dir=<%= $tmp_dir %>/schedule_offline_snapshot

cd "<%= $base_dir %>/aem-aws-stack-provisioner/"
set +o errexit
###################################################
# Case check to enable/disable all
# or a specific offline snapshot
###################################################
case "$state" in
  enable)
    mkdir -p ${tmp_dir}
    case "$scheduled_job_name" in
      all)
        sed -e '/^.*scheduled_jobs.*enable::offline.*$/s/False$/True/' \
        < <%= $base_dir %>/aem-aws-stack-provisioner/data/local.yaml \
        >> ${tmp_dir}/local.yaml

        translate_exit_code "$?"
      ;;
      offline_snapshot)
        sed -e '/^.*scheduled_jobs.*enable::offline_snapshot.*$/s/False$/True/' \
        < <%= $base_dir %>/aem-aws-stack-provisioner/data/local.yaml \
        >> ${tmp_dir}/local.yaml

        translate_exit_code "$?"
      ;;
      offline_compaction_snapshot)
        sed -e '/^.*scheduled_jobs.*enable::offline_compaction_snapshot.*$/s/False$/True/' \
        < <%= $base_dir %>/aem-aws-stack-provisioner/data/local.yaml \
        >> ${tmp_dir}/local.yaml

        translate_exit_code "$?"
      ;;
      *)
        exit 1
      ;;
    esac
    ;;
  disable)
    mkdir -p ${tmp_dir}
    case "$scheduled_job_name" in
      all)
        sed -e '/^.*scheduled_jobs.*enable::offline.*$/s/True$/False/' \
        < <%= $base_dir %>/aem-aws-stack-provisioner/data/local.yaml \
        >> ${tmp_dir}/local.yaml

        translate_exit_code "$?"
      ;;
      offline_snapshot)
        sed -e '/^.*scheduled_jobs.*enable::offline_snapshot.*$/s/True$/False/' \
        < <%= $base_dir %>/aem-aws-stack-provisioner/data/local.yaml \
        >> ${tmp_dir}/local.yaml

        translate_exit_code "$?"
      ;;
      offline_compaction_snapshot)

        sed -e '/^.*scheduled_jobs.*enable::offline_compaction_snapshot.*$/s/True$/False/' \
        < <%= $base_dir %>/aem-aws-stack-provisioner/data/local.yaml \
        >> ${tmp_dir}/local.yaml

        translate_exit_code "$?"
      ;;
      *)
        exit 1
      ;;
    esac
  ;;
  *)
    exit 1
  ;;
esac

aws s3 cp "${tmp_dir}/local.yaml" "s3://<%= $data_bucket_name %>/<%= $stack_prefix %>/data/local.yaml"
translate_exit_code "$?"

mv -f "${tmp_dir}/local.yaml" <%= $base_dir %>/aem-aws-stack-provisioner/data/local.yaml
translate_exit_code "$?"

cd "<%= $base_dir %>/aem-aws-stack-provisioner/"
# Schedule job for offline-snapshot
echo "Applying scheduled-job Puppet manifest for all components..."
puppet apply \
  --detailed-exitcodes \
  --debug \
  --modulepath modules \
  --hiera_config conf/hiera.yaml \
  manifests/scheduled-job.pp

translate_puppet_exit_code "$?"

rm -rf "${tmp_dir:?}/*"
